import express from "express";
import Book from "../models/Book.js";
import Order from "../models/Order.js";
const router = express.Router();

// GET /api/books/bestsellers
router.get("/bestsellers", async (req, res) => {
  try {
    const bestSellers = await Order.aggregate([
      // 2.1. ‡πÅ‡∏¢‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (items) ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ Order ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏¢‡πà‡∏≠‡∏¢
      { $unwind: "$items" },
      
      // 2.2. ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° bookId ‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (quantity)
      {
        $group: {
          _id: "$items.bookId",
          totalSold: { $sum: "$items.quantity" }
        }
      },
      
      // 2.3. ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
      { $sort: { totalSold: -1 } },
      
      // 2.4. ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
      { $limit: 10 },
      
      // 2.5. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° (lookup) ‡∏Å‡∏±‡∏ö collection 'books' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
      {
        $lookup: {
          from: "books", // (‡∏ä‡∏∑‡πà‡∏≠ collection ‡∏Ç‡∏≠‡∏á Book model)
          localField: "_id", // (bookId ‡∏à‡∏≤‡∏Å $group)
          foreignField: "_id", // (field ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÉ‡∏ô 'books')
          as: "bookDetails"
        }
      },
      
      // 2.6. $lookup ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô array, ‡πÉ‡∏´‡πâ $unwind ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ object ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
      { $unwind: "$bookDetails" },
      
      // 2.7. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠)
      {
        $project: {
          _id: "$bookDetails._id",
          title: "$bookDetails.title",
          author: "$bookDetails.author",
          price: "$bookDetails.price",
          category: "$bookDetails.category",
          image: "$bookDetails.image",
          stock: "$bookDetails.stock",
          createdAt: "$bookDetails.createdAt"
          // totalSold: "$totalSold" // (‡∏™‡πà‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å)
        }
      }
    ]);
    
    res.json(bestSellers);

  } catch (error) {
    res.status(500).json({ message: "Error fetching bestsellers: " + error.message });
  }
});
// ‡∏î‡∏∂‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get("/", async (req, res) => {
  try {
    const books = await Book.find();
    res.json(books);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà
router.post("/", async (req, res) => {
  try {
    // üí° ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô
    const newBook = new Book(req.body);
    const saved = await newBook.save();
    res.json(saved);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏•‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡∏≤‡∏° ID
router.delete("/:id", async (req, res) => {
  try {
    const deletedBook = await Book.findByIdAndDelete(req.params.id);

    if (!deletedBook) {
      return res.status(404).json({ message: "Book not found" });
    }

    // üí° ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ß‡πà‡∏≤‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
    res.json({ message: "Book deleted successfully" });
  } catch (error) {
    // 400 Bad Request ‡∏ñ‡πâ‡∏≤ ID ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (Invalid ObjectId)
    res.status(500).json({ message: error.message });
  }
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏î‡∏∂‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡∏≤‡∏° ID
router.get("/:id", async (req, res) => {
  try {
    const book = await Book.findById(req.params.id);
    if (!book) {
      return res.status(404).json({ message: "Book not found" });
    }
    res.json(book);
  } catch (error) {
    // 400 Bad Request ‡∏ñ‡πâ‡∏≤ ID ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (Invalid ObjectId)
    res.status(500).json({ message: error.message });
  }
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡∏≤‡∏° ID
router.put("/:id", async (req, res) => {
  try {
    // üí° ‡πÉ‡∏ä‡πâ findByIdAndUpdate ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    // { new: true } ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
    // { runValidators: true } ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏° Mongoose Schema (‡πÄ‡∏ä‡πà‡∏ô title, price ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ)
    const updatedBook = await Book.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true }
    );

    if (!updatedBook) {
      return res.status(404).json({ message: "Book not found" });
    }

    res.json(updatedBook);
  } catch (error) {
    res.status(400).json({ message: error.message }); // 400 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Validation Error
  }
});

export default router;