// ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå orderRoutes.js

import express from "express";
import Order from "../models/Order.js";
import Book from "../models/Book.js"; 

const router = express.Router();

// üí° (‡πÄ‡∏û‡∏¥‡πà‡∏°) GET / (‡∏î‡∏∂‡∏á Order ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
router.get("/", async (req, res) => {
  try {
    const orders = await Order.find();
    res.json(orders);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// --- ‚≠êÔ∏è ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ Route ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‚≠êÔ∏è ---
// ‚úÖ ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
router.get("/user/:userId", async (req, res) => {
  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Order ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö userId
    const orders = await Order.find({ userId: req.params.userId })
                              .sort({ createdAt: -1 }); // üëà (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤)

    if (!orders) {
      return res.json([]); // üëà (‡∏™‡πà‡∏á array ‡∏ß‡πà‡∏≤‡∏á ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠)
    }
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    res.json(orders);

  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});
// --- ‚≠êÔ∏è ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‚≠êÔ∏è ---


// --- (‡πÇ‡∏Ñ‡πâ‡∏î POST / (‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å) ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ - ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß) ---
router.post("/", async (req, res) => {
  const { userId, items, total, addressId } = req.body;

  try {
    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô (Validation)
    for (const item of items) {
      const book = await Book.findById(item.bookId);
      if (!book) {
        return res.status(404).json({ message: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${item.title}` });
      }
      if (book.stock < item.quantity) {
        return res.status(400).json({ 
          message: `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ '${item.title}' ‡∏°‡∏µ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${book.stock} ‡∏ä‡∏¥‡πâ‡∏ô)` 
        });
      }
    }

    // 3. ‡∏ñ‡πâ‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏û‡∏≠ ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ "‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å" (Update)
    for (const item of items) {
      await Book.findByIdAndUpdate(item.bookId, { 
        $inc: { stock: -item.quantity } 
      });
    }

    // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (Order)
    const newOrder = new Order({
      userId,
      items,
      total,
      addressId,
      paymentMethod: req.body.paymentMethod || "QR Code",
      paymentStatus: "Paid",
      orderStatus: "Processing"
    });
    
    const savedOrder = await newOrder.save();
    
    // 5. ‡∏™‡πà‡∏á Order ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    res.status(201).json(savedOrder);

  } catch (error) {
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà Server: " + error.message });
  }
});


export default router;