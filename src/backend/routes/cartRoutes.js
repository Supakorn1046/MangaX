import express from "express";
import Cart from "../models/Cart.js";

const router = express.Router();

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
router.get("/user/:userId", async (req, res) => {
  try {
    const cart = await Cart.findOne({ userId: req.params.userId });
    if (!cart) return res.json({ items: [], total: 0 });
    res.json(cart);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
router.post("/add", async (req, res) => {
  try {
    // üí° 1. ‡∏î‡∏∂‡∏á image (URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û) ‡∏°‡∏≤‡∏à‡∏≤‡∏Å req.body
    const { userId, bookId, title, price, quantity, image } = req.body;
    let cart = await Cart.findOne({ userId });

    if (!cart) {
      cart = new Cart({ userId, items: [], total: 0 });
    }

    const itemIndex = cart.items.findIndex(i => i.bookId.toString() === bookId);

    if (itemIndex > -1) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
      cart.items[itemIndex].quantity += quantity;
      
      // üí° 3. (Optional) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      if (!cart.items[itemIndex].image && image) {
          cart.items[itemIndex].image = image;
      }

    } else {
      // üí° 2. ‡πÄ‡∏û‡∏¥‡πà‡∏° image ‡πÄ‡∏°‡∏∑‡πà‡∏≠ push ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
      cart.items.push({ bookId, title, price, image, quantity });
    }

    cart.total = cart.items.reduce((sum, item) => sum + item.price * item.quantity, 0);
    const savedCart = await cart.save();
    res.json(savedCart);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// ‚úÖ ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
router.delete("/remove/:userId/:bookId", async (req, res) => {
  try {
    const { userId, bookId } = req.params;
    const cart = await Cart.findOne({ userId });
    if (!cart) return res.status(4.04).json({ message: "Cart not found" });

    cart.items = cart.items.filter(i => i.bookId.toString() !== bookId);
    cart.total = cart.items.reduce((sum, item) => sum + item.price * item.quantity, 0);

    await cart.save();
    res.json(cart);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});
// ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Clear Cart)
router.delete("/user/:userId", async (req, res) => {
  try {
    const { userId } = req.params;
    // ‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏°‡∏±‡∏ô‡∏ó‡∏¥‡πâ‡∏á
    const deletedCart = await Cart.findOneAndDelete({ userId: userId });

    if (!deletedCart) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
    }

    res.json({ message: "‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

export default router;

