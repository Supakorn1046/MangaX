import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import './admin_list.css';
import logoImage from '../assets/logo.png';
import { CartIcon, LogoutIcon, AddIcon, SearchIcon } from './admin_icon.jsx';

// URL ‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á API
const API_BASE_URL = 'http://localhost:5000/api/books';

function ProductPage() {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    
    // üí° ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    const [searchTerm, setSearchTerm] = useState(''); 
    
    const navigate = useNavigate();

    // ----------------------------------------------------
    // üí° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Fetch ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Backend (GET /api/books)
    // ----------------------------------------------------
    const fetchProducts = async () => {
        setLoading(true);
        setError(null);
        try {
            const response = await fetch(API_BASE_URL);
            if (!response.ok) {
                throw new Error('Failed to fetch products');
            }
            const data = await response.json();
            setProducts(data);
        } catch (err) {
            setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ');
            console.error('Fetch error:', err);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchProducts();
    }, []);

    // ----------------------------------------------------
    // üí° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ (CRUD & Utility)
    // ----------------------------------------------------

    const handleAddProduct = () => {
        navigate('/admin_add');
    };

    const handleEditProduct = (productId) => {
        navigate(`/admin_edit/${productId}`);
    };

    // üí° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å DB ‡πÅ‡∏•‡∏∞ Refetch)
    const handleDeleteProduct = async (productId, productTitle) => {
        if (!window.confirm(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "${productTitle}" (ID: ${productId}) ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
            return;
        }

        try {
            const response = await fetch(`${API_BASE_URL}/${productId}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                alert(`‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "${productTitle}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
                // üîë ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å fetchProducts ‡∏ã‡πâ‡∏≥ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å DB ‡∏°‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
                fetchProducts(); 
            } else {
                alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤');
            }
        } catch (error) {
            console.error('Error deleting product:', error);
            alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ');
        }
    };

    const handleLogout = () => {
        localStorage.removeItem('userInfo');
        localStorage.removeItem('isAdmin');
        navigate('/login');
    };

    // üí° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Frontend)
    const filteredProducts = products.filter(product => {
        // ‡∏Å‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á, ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á, ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        const lowerCaseSearch = searchTerm.toLowerCase();
        return (
            product.title?.toLowerCase().includes(lowerCaseSearch) ||
            product.author?.toLowerCase().includes(lowerCaseSearch) ||
            product.description?.toLowerCase().includes(lowerCaseSearch)
        );
    });

    // ----------------------------------------------------
    // üí° ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (Render)
    // ----------------------------------------------------

    if (loading) {
        return <div className="loading-screen">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>;
    }

    if (error) {
        return <div className="error-screen">‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error}</div>;
    }

    return (
        <div className="layout-container">
            {/* ==== Sidebar (‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢) ==== */}
            <aside className="sidebar">
                <div className="sidebar-logo">
                    <div className="logo-box">
                        <img src={logoImage} alt="MANGA X Logo"/>
                    </div>
                </div>
                
                <nav className="sidebar-nav">
                    <a href="#" className="nav-link active" onClick={() => navigate('/admin_list')}>
                        <CartIcon />
                        ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                    </a>
                    <a href="#" className="nav-link" onClick={handleLogout}>
                        <LogoutIcon />
                        ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
                    </a>
                </nav>
            </aside>

            {/* ==== Main Content (‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å) ==== */}
            <main className="main-content">
                
                <header className="main-header">
                    <h1 className="main-title">
                        <CartIcon />
                        ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ({products.length})
                    </h1>
                    <button className="btn btn-primary" onClick={handleAddProduct}> 
                        <AddIcon />
                        ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    </button>
                </header>

                <div className="search-bar">
                    <div className="search-wrapper">
                        <span className="search-icon">
                            <SearchIcon />
                        </span>
                        {/* üí° ‡∏ú‡∏π‡∏Å input ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö state */}
                        <input 
                            type="text" 
                            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á, ‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á, ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î..." 
                            className="search-input" 
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                        />
                    </div>
                </div>

                <div className="table-wrapper">
                    <table className="product-table">
                        <thead>
                            <tr>
                                <th>‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                                <th>‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                                <th>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á</th>
                                <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á</th>
                                <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
                                <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (Stock)</th>
                                <th>‡∏£‡∏≤‡∏Ñ‡∏≤</th>
                                <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                            </tr>
                        </thead>
                        <tbody>
                            {filteredProducts.length > 0 ? ( // üí° ‡πÉ‡∏ä‡πâ filteredProducts ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏ô‡∏•‡∏π‡∏õ
                                filteredProducts.map((product) => (
                                    <tr key={product._id}> 
                                        <td>{product._id}</td>
                                        <td>
                                            <img src={product.image || 'placeholder.jpg'} alt={product.title} className="product-image" />
                                        </td>
                                        <td>{product.title}</td>
                                        <td>{product.author || '-'}</td>
                                        <td className="product-desc">{product.description}</td>
                                        <td>{product.stock}</td>
                                        <td>‡∏ø{product.price.toFixed(2)}</td> 
                                        <td>
                                            <div className="action-buttons">
                                                <button 
                                                    className="btn btn-edit"
                                                    onClick={() => handleEditProduct(product._id)}
                                                >
                                                    ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                                                </button>
                                                <button 
                                                    className="btn btn-delete"
                                                    onClick={() => handleDeleteProduct(product._id, product.title)}
                                                >
                                                    ‡∏•‡∏ö
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                ))
                            ) : (
                                <tr>
                                    <td colSpan="8" style={{ textAlign: 'center' }}>
                                        {searchTerm ? `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö "${searchTerm}"` : '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
                                    </td>
                                </tr>
                            )}
                        </tbody>
                    </table>
                </div>

            </main>
        </div>
    );
}

export default ProductPage;